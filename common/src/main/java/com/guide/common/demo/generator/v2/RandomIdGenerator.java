package com.guide.common.demo.generator.v2;

import com.google.common.annotations.VisibleForTesting;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Random;

/**
 * 第二轮重构：提高代码的可测试性
 * generate() 函数定义为静态函数，会影响使用该函数的代码的可测试性；
 * generate() 函数的代码实现依赖运行环境（本机名）、时间函数、随机函数，所以 generate() 函数本身的可测试性也不好。
 * 第四轮重构：添加注释
 *
 * @author hjx
 * @version 1.0
 * @date 2021/12/25 11:29
 */

/**
 * Id Generator that is used to generate random IDs.
 *
 * <p>
 * The IDs generated by this class are not absolutely unique,
 * but the probability of duplication is very low.
 */
public class RandomIdGenerator implements LogTraceIdGenerator
{
    private static final Logger logger = LoggerFactory.getLogger(RandomIdGenerator.class);

    /**
     * Generate the random ID. The IDs may be duplicated only in extreme situation.
     *
     * @return an random ID
     * @throws IdGenerationFailureException 生成失败
     */
    @Override
    public String generate() throws IdGenerationFailureException
    {
        String substrOfHostName = null;
        try
        {
            substrOfHostName = getLastFieldOfHostName();
        }
        catch (UnknownHostException e)
        {
            /*
            包裹成新的异常抛出，原因如下
            1 UnknownHostException暴露内部实现
            2 UnknownHostException与业务无关，调用者无法理解、无法处理
             */
            throw new IdGenerationFailureException("获取不到主机名", e);
        }
        long currentTimeMillis = System.currentTimeMillis();
        String randomString = generateRandomAlphameric(8);
        String id = String.format("%s-%d-%s", substrOfHostName, currentTimeMillis, randomString);
        return id;
    }

    /**
     * Get the local hostname and
     * extract the last field of the name string splitted by delimiter '.'.
     *
     * @return the last field of hostname. Returns null if hostname is not obtained.
     * @throws UnknownHostException
     */
    private String getLastFieldOfHostName() throws UnknownHostException
    {
        String substrOfHostName = null;
        String hostName = InetAddress.getLocalHost().getHostName();
        if (hostName == null || hostName.isEmpty())
        {
            throw new UnknownHostException("无法获取主机名");
        }
        substrOfHostName = getLastSubstrSplittedByDot(hostName);
        return substrOfHostName;
    }

    /**
     * Get the last field of {@hostName} splitted by delemiter '.'.
     *
     * @param hostName should not be null
     * @return the last field of {@hostName}. Throw IllegalArgumentException if {@hostName} is empty string.
     */
    @VisibleForTesting
    protected String getLastSubstrSplittedByDot(String hostName)
    {
        //私有函数、内部函数，不强制要求参数校验。调用者不应该传递为空的参数。
        if (hostName == null || hostName.isEmpty())
        {
            throw new IllegalArgumentException("...");
        }
        String[] tokens = hostName.split("\\.");
        String substrOfHostName = tokens[tokens.length - 1];
        return substrOfHostName;
    }

    /**
     * Generate random string which
     * only contains digits, uppercase letters and lowercase letters.
     *
     * @param length should not be less than 0
     * @return the random string. Throw IllegalArgumentException if {@length} is 0
     */
    @VisibleForTesting
    protected String generateRandomAlphameric(int length)
    {
        //私有函数、内部函数，不强制要求参数校验。调用者不应该传递为空的参数。
        if (length <= 0)
        {
            throw new IllegalArgumentException("...");
        }
        char[] randomChars = new char[length];
        int count = 0;
        Random random = new Random();
        while (count < length)
        {
            int maxAscii = 'z';
            int randomAscii = random.nextInt(maxAscii);
            boolean isDigit = randomAscii >= '0' && randomAscii <= '9';
            boolean isUppercase = randomAscii >= 'A' && randomAscii <= 'Z';
            boolean isLowercase = randomAscii >= 'a' && randomAscii <= 'z';
            if (isDigit || isUppercase || isLowercase)
            {
                randomChars[count] = (char) (randomAscii);
                ++count;
            }
        }
        return new String(randomChars);
    }
}
